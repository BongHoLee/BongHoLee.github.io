---
import { getCollection } from 'astro:content';
import type { GetStaticPaths } from 'astro';
import BaseHead from '../../components/BaseHead.astro';
import Footer from '../../components/Footer.astro';
import FormattedDate from '../../components/FormattedDate.astro';
import Header from '../../components/Header.astro';
import { SITE_TITLE } from '../../consts';

export const getStaticPaths = (async () => {
	const posts = await getCollection('blog');
	const allTags = new Set<string>();

	// 모든 태그 수집
	posts.forEach(post => {
		if (post.data.tags) {
			post.data.tags.forEach((tag: string) => {
				allTags.add(tag.toLowerCase().replace(/\s+/g, '-'));
			});
		}
	});

	return Array.from(allTags).map(tag => ({
		params: { tag },
	}));
}) satisfies GetStaticPaths;

const { tag } = Astro.params;

// 포스트 필터링 및 정렬
const posts = await getCollection('blog');
const filteredPosts = posts.filter(post => {
	if (!post.data.tags) return false;
	return post.data.tags.some((postTag: string) => 
		postTag.toLowerCase().replace(/\s+/g, '-') === tag
	);
}).sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf());

// 원본 태그 이름 찾기
const originalTagName = posts
	.flatMap(post => post.data.tags || [])
	.find((postTag: string) => postTag.toLowerCase().replace(/\s+/g, '-') === tag) || tag;

const tagEmojis: Record<string, string> = {
	'Java': '☕',
	'Keywords': '🔑',
	'Framework': '🏗️',
	'Database': '🗄️',
	'Algorithm': '🧮',
	'Spring': '🍃',
	'Kotlin': '🎯',
	'Security': '🔒',
	'Architecture': '🏛️',
	'Design Pattern': '🎨',
	'Reflection': '🪞',
	'Testing': '🧪',
	'Performance': '⚡',
	'Memory': '💾',
	'Network': '🌐',
	'Web': '🌐',
	'Backend': '⚙️',
	'Frontend': '🎨',
	'DevOps': '🚀',
	'Git': '📝'
};

const tagEmoji = tagEmojis[originalTagName] || '🏷️';
---

<!doctype html>
<html lang="ko">
	<head>
		<BaseHead 
			title={`${originalTagName} | ${SITE_TITLE}`} 
			description={`${originalTagName} 태그가 포함된 모든 포스트를 확인하세요.`} 
		/>
	</head>
	<body>
		<Header />
		<main>
			<section class="tag-header">
				<div class="tag-title">
					<span class="tag-emoji">{tagEmoji}</span>
					<h1>{originalTagName}</h1>
				</div>
				<p>{originalTagName} 태그가 포함된 포스트들입니다.</p>
				<div class="tag-stats">
					<span class="post-count">{filteredPosts.length}개의 포스트</span>
					<a href="/tags/" class="back-to-tags">모든 태그 보기 →</a>
				</div>
			</section>
			
			<section class="posts-list">
				{filteredPosts.map((post) => (
					<article class="post-card">
						<div class="post-content">
							<h2 class="post-title">
								<a href={`/blog/${post.id}/`}>{post.data.title}</a>
							</h2>
							
							<div class="post-meta">
								<FormattedDate date={post.data.pubDate} />
								{post.data.author && <span class="author">by {post.data.author}</span>}
							</div>
							
							{post.data.description && (
								<p class="post-description">{post.data.description}</p>
							)}
							
							{post.data.tags && post.data.tags.length > 0 && (
								<div class="post-tags">
									{post.data.tags.slice(0, 4).map((postTag) => (
										<a href={`/tags/${postTag.toLowerCase().replace(/\s+/g, '-')}/`} class="tag" class:list={{ active: postTag.toLowerCase().replace(/\s+/g, '-') === tag }}>{postTag}</a>
									))}
								</div>
							)}
						</div>
					</article>
				))}
			</section>
		</main>
		<Footer />
		
		<style>
			.tag-header {
				text-align: center;
				margin-bottom: 3rem;
				padding: 2rem 0;
			}
			
			.tag-title {
				display: flex;
				align-items: center;
				justify-content: center;
				gap: 1rem;
				margin-bottom: 1rem;
			}
			
			.tag-emoji {
				font-size: 3rem;
			}
			
			.tag-header h1 {
				font-size: 2.5rem;
				color: #2c3e50;
				margin: 0;
			}
			
			.tag-header p {
				font-size: 1.2rem;
				color: #7f8c8d;
				margin-bottom: 1.5rem;
				max-width: 600px;
				margin-left: auto;
				margin-right: auto;
			}
			
			.tag-stats {
				display: flex;
				align-items: center;
				justify-content: center;
				gap: 2rem;
				flex-wrap: wrap;
			}
			
			.post-count {
				background: #ecf0f1;
				color: #2c3e50;
				padding: 0.5rem 1rem;
				border-radius: 20px;
				font-weight: 500;
			}
			
			.back-to-tags {
				color: #3498db;
				text-decoration: none;
				font-weight: 500;
			}
			
			.back-to-tags:hover {
				text-decoration: underline;
			}
			
			.posts-list {
				display: flex;
				flex-direction: column;
				gap: 1.5rem;
			}
			
			.post-card {
				background: white;
				border-radius: 12px;
				padding: 2rem;
				box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
				border: 1px solid #e1e8ed;
				transition: transform 0.2s ease, box-shadow 0.2s ease;
			}
			
			.post-card:hover {
				transform: translateY(-2px);
				box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
			}
			
			.post-title {
				margin: 0 0 1rem 0;
				font-size: 1.5rem;
				line-height: 1.4;
			}
			
			.post-title a {
				color: #2c3e50;
				text-decoration: none;
			}
			
			.post-title a:hover {
				color: #3498db;
			}
			
			.post-meta {
				display: flex;
				align-items: center;
				gap: 1rem;
				margin-bottom: 1rem;
				color: #7f8c8d;
				font-size: 0.9rem;
			}
			
			.post-description {
				color: #555;
				line-height: 1.6;
				margin-bottom: 1rem;
			}
			
			.post-tags {
				display: flex;
				gap: 0.5rem;
				flex-wrap: wrap;
				margin-top: 1rem;
			}
			
			.tag {
				background: #f8f9fa;
				color: #495057;
				padding: 0.25rem 0.75rem;
				border-radius: 15px;
				font-size: 0.8rem;
				border: 1px solid #e9ecef;
				text-decoration: none;
				transition: all 0.2s ease;
			}
			
			.tag:hover {
				background: #e9ecef;
			}
			
			.tag.active {
				background: #e74c3c;
				color: white;
				border-color: #e74c3c;
			}
			
			@media (max-width: 768px) {
				.tag-title {
					flex-direction: column;
					gap: 0.5rem;
				}
				
				.tag-emoji {
					font-size: 2.5rem;
				}
				
				.tag-header h1 {
					font-size: 2rem;
				}
				
				.tag-stats {
					flex-direction: column;
					gap: 1rem;
				}
				
				.post-card {
					padding: 1.5rem;
				}
				
				.post-title {
					font-size: 1.3rem;
				}
				
			}
		</style>
	</body>
</html>