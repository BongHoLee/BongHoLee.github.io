---
import { getCollection } from 'astro:content';
import BaseHead from '../../components/BaseHead.astro';
import Header from '../../components/Header.astro';
import Footer from '../../components/Footer.astro';
import FormattedDate from '../../components/FormattedDate.astro';
import { SITE_TITLE } from '../../consts';

export async function getStaticPaths() {
	const posts = await getCollection('blog');
	
	// 모든 카테고리 수집
	const categories = new Set<string>();
	posts.forEach(post => {
		if (post.data.categories && Array.isArray(post.data.categories)) {
			post.data.categories.forEach(category => {
				categories.add(category);
			});
		}
	});
	
	// 각 카테고리에 대한 경로 생성
	return Array.from(categories).map(category => ({
		params: { category: category.toLowerCase() },
		props: { 
			category,
			posts: posts
				.filter(post => 
					post.data.categories && 
					post.data.categories.includes(category)
				)
				.sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf())
		}
	}));
}

const { category, posts } = Astro.props;

const categoryDescriptions: Record<string, string> = {
	'Programming': '프로그래밍 언어, 개발 기술, 코딩 실습',
	'Algorithm': '자료구조, 알고리즘 문제해결, 코딩테스트', 
	'Book-Review': '기술서적 리뷰, 독서 노트, 학습 정리',
	'System-Design': '시스템 아키텍처, 설계 패턴, 소프트웨어 구조',
	'DevOps': '배포, 운영, 개발 도구, CI/CD'
};

const categoryEmojis: Record<string, string> = {
	'Programming': '💻',
	'Algorithm': '🧮', 
	'Book-Review': '📚',
	'System-Design': '🏗️',
	'DevOps': '🚀'
};
---

<!doctype html>
<html lang="ko">
	<head>
		<BaseHead 
			title={`${category} | ${SITE_TITLE}`} 
			description={`${category} 카테고리의 모든 포스트를 확인하세요. ${categoryDescriptions[category] || ''}`}
		/>
	</head>
	<body>
		<Header title={SITE_TITLE} />
		<main>
			<section class="category-header">
				<h1>
					<span class="category-emoji">{categoryEmojis[category] || '📁'}</span>
					{category}
				</h1>
				<p class="category-description">
					{categoryDescriptions[category] || `${category}에 관한 포스트`}
				</p>
				<div class="category-stats">
					<span class="post-count">{posts.length}개의 포스트</span>
					<a href="/categories/" class="back-link">← 모든 카테고리 보기</a>
				</div>
			</section>
			
			<section class="posts-list">
				{posts.map((post) => (
					<article class="post-card">
						<div class="post-content">
							<h2 class="post-title">
								<a href={`/blog/${post.id}/`}>{post.data.title}</a>
							</h2>
							
							<div class="post-meta">
								<FormattedDate date={post.data.pubDate} />
								{post.data.author && <span class="author">by {post.data.author}</span>}
							</div>
							
							{post.data.description && (
								<p class="post-description">{post.data.description}</p>
							)}
							
							{post.data.tags && post.data.tags.length > 0 && (
								<div class="post-tags">
									{post.data.tags.slice(0, 3).map((tag: string) => (
										<span class="tag">{tag}</span>
									))}
								</div>
							)}
						</div>
					</article>
				))}
			</section>
			
			{posts.length === 0 && (
				<div class="no-posts">
					<p>아직 이 카테고리에 포스트가 없습니다.</p>
					<a href="/blog/">모든 포스트 보기 →</a>
				</div>
			)}
		</main>
		<Footer />
		
		<style>
			.category-header {
				text-align: center;
				margin-bottom: 3rem;
				padding: 2rem 0;
			}
			
			.category-header h1 {
				font-size: 2.5rem;
				margin-bottom: 1rem;
				color: #2c3e50;
				display: flex;
				align-items: center;
				justify-content: center;
				gap: 0.5rem;
			}
			
			.category-emoji {
				font-size: 2rem;
			}
			
			.category-description {
				font-size: 1.2rem;
				color: #7f8c8d;
				margin-bottom: 1.5rem;
			}
			
			.category-stats {
				display: flex;
				align-items: center;
				justify-content: center;
				gap: 2rem;
				flex-wrap: wrap;
			}
			
			.post-count {
				background: #ecf0f1;
				color: #2c3e50;
				padding: 0.5rem 1rem;
				border-radius: 20px;
				font-weight: 500;
			}
			
			.back-link {
				color: #3498db;
				text-decoration: none;
				font-weight: 500;
			}
			
			.back-link:hover {
				text-decoration: underline;
			}
			
			.posts-list {
				display: flex;
				flex-direction: column;
				gap: 1.5rem;
			}
			
			.post-card {
				background: white;
				border-radius: 12px;
				padding: 2rem;
				box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
				border: 1px solid #e1e8ed;
				transition: transform 0.2s ease, box-shadow 0.2s ease;
			}
			
			.post-card:hover {
				transform: translateY(-2px);
				box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
			}
			
			.post-title {
				margin: 0 0 1rem 0;
				font-size: 1.5rem;
				line-height: 1.4;
			}
			
			.post-title a {
				color: #2c3e50;
				text-decoration: none;
			}
			
			.post-title a:hover {
				color: #3498db;
			}
			
			.post-meta {
				display: flex;
				align-items: center;
				gap: 1rem;
				margin-bottom: 1rem;
				color: #7f8c8d;
				font-size: 0.9rem;
			}
			
			.post-description {
				color: #555;
				line-height: 1.6;
				margin-bottom: 1rem;
			}
			
			.post-tags {
				display: flex;
				gap: 0.5rem;
				flex-wrap: wrap;
			}
			
			.tag {
				background: #f8f9fa;
				color: #495057;
				padding: 0.25rem 0.75rem;
				border-radius: 15px;
				font-size: 0.8rem;
				border: 1px solid #e9ecef;
			}
			
			.no-posts {
				text-align: center;
				padding: 3rem;
				color: #7f8c8d;
			}
			
			.no-posts a {
				color: #3498db;
				text-decoration: none;
			}
			
			@media (max-width: 768px) {
				.category-header h1 {
					font-size: 2rem;
					flex-direction: column;
					gap: 0.25rem;
				}
				
				.category-stats {
					flex-direction: column;
					gap: 1rem;
				}
				
				.post-card {
					padding: 1.5rem;
				}
				
				.post-title {
					font-size: 1.3rem;
				}
			}
		</style>
	</body>
</html>