---
import { GISCUS } from "../consts";

const hasCategory = Boolean(GISCUS.category);
const hasCategoryId = Boolean(GISCUS.categoryId);
const enabled = Boolean(GISCUS.repo && GISCUS.repoId && (hasCategory || hasCategoryId));
const showNote = !enabled && import.meta.env.DEV;
---

{enabled && (
  <div class="giscus-container">
    {
      // Render with category if provided, otherwise with category-id only
      hasCategory ? (
        <script
          src="https://giscus.app/client.js"
          data-repo={GISCUS.repo}
          data-repo-id={GISCUS.repoId}
          data-category={GISCUS.category}
          data-category-id={GISCUS.categoryId}
          data-mapping={GISCUS.mapping}
          data-strict={GISCUS.strict}
          data-reactions-enabled={GISCUS.reactionsEnabled}
          data-emit-metadata={GISCUS.emitMetadata}
          data-input-position={GISCUS.inputPosition}
          data-theme={GISCUS.theme}
          data-lang={GISCUS.lang}
          crossorigin="anonymous"
          async
        />
      ) : (
        <script
          src="https://giscus.app/client.js"
          data-repo={GISCUS.repo}
          data-repo-id={GISCUS.repoId}
          data-category-id={GISCUS.categoryId}
          data-mapping={GISCUS.mapping}
          data-strict={GISCUS.strict}
          data-reactions-enabled={GISCUS.reactionsEnabled}
          data-emit-metadata={GISCUS.emitMetadata}
          data-input-position={GISCUS.inputPosition}
          data-theme={GISCUS.theme}
          data-lang={GISCUS.lang}
          crossorigin="anonymous"
          async
        />
      )
    }
  </div>
)}

<style>
  .giscus-container {
    width: 720px;
    max-width: calc(100% - 2em);
    margin: 2rem auto 0 auto;
    padding: 0 1em;
  }
  .giscus-note {
    color: rgb(var(--gray));
    font-size: 0.9rem;
    text-align: center;
  }
</style>

{showNote && (
  <div class="giscus-container">
    <p class="giscus-note">
      댓글 위젯이 아직 설정되지 않았습니다. <code>src/consts.ts</code>의 <code>GISCUS</code> 값을 채워주세요.
    </p>
  </div>
)}
